From: Michael Webster <miketwebster@gmail.com>
Date: Wed, 19 Oct 2016 17:41:48 -0400
Subject: desktop: Don't rebuild the desktop any time _NET_WORKAREA changes -
 this can happen fairly frequently in some situations,
 causing crashes due to the asynchronous nature of nemo's directory loading
 back-end.

Instead, adjust the icon container margins (as was done previous to
individual monitor handling) for the desktop windows when the
_NET_WORKAREA changes.  This property only applies to primary monitors,
so for non-primary monitors we leave the margins set at 50 all around,
which is fairly reasonable for most situations involving panels, etc..

This change means that the Nemo[Blank]DesktopWindows now cover the
entirety of each monitor, so we go back to explicitly sizing these
windows as well (as opposed to simply maximizing to ensure they
conform to the work area on non-primary monitors.)

Discussion at #1177
---
 libnemo-private/nemo-desktop-utils.c | 18 +++++++
 libnemo-private/nemo-desktop-utils.h |  2 +
 src/nemo-blank-desktop-window.c      |  4 +-
 src/nemo-desktop-icon-view.c         | 97 ++++++++++++++++++++++++++++++++++++
 src/nemo-desktop-manager.c           | 48 ------------------
 src/nemo-desktop-window.c            |  4 +-
 src/nemo-window.h                    |  1 -
 7 files changed, 121 insertions(+), 53 deletions(-)

diff --git a/libnemo-private/nemo-desktop-utils.c b/libnemo-private/nemo-desktop-utils.c
index 7f18c84..bf234d2 100644
--- a/libnemo-private/nemo-desktop-utils.c
+++ b/libnemo-private/nemo-desktop-utils.c
@@ -40,6 +40,24 @@ nemo_desktop_utils_get_monitor_work_rect (gint monitor, GdkRectangle *rect)
     gdk_screen_get_monitor_workarea (default_screen, monitor, rect);
 }
 
+void
+nemo_desktop_utils_get_monitor_geometry (gint monitor, GdkRectangle *rect)
+{
+    ensure_screen ();
+
+    g_return_if_fail (monitor >= 0 && monitor < gdk_screen_get_n_monitors (default_screen));
+
+    gdk_screen_get_monitor_geometry (default_screen, monitor, rect);
+}
+
+gboolean
+nemo_desktop_utils_get_primary_monitor (void)
+{
+    ensure_screen ();
+
+    return gdk_screen_get_primary_monitor (default_screen);
+}
+
 gint
 nemo_desktop_utils_get_monitor_for_widget (GtkWidget *widget)
 {
diff --git a/libnemo-private/nemo-desktop-utils.h b/libnemo-private/nemo-desktop-utils.h
index 617f481..6334120 100644
--- a/libnemo-private/nemo-desktop-utils.h
+++ b/libnemo-private/nemo-desktop-utils.h
@@ -28,6 +28,8 @@
 G_BEGIN_DECLS
 
 void nemo_desktop_utils_get_monitor_work_rect (gint monitor, GdkRectangle *rect);
+void nemo_desktop_utils_get_monitor_geometry (gint monitor, GdkRectangle *rect);
+gboolean nemo_desktop_utils_get_primary_monitor (void);
 gint nemo_desktop_utils_get_monitor_for_widget (GtkWidget *widget);
 gboolean nemo_desktop_utils_get_monitor_cloned (gint monitor, gint x_primary);
 
diff --git a/src/nemo-blank-desktop-window.c b/src/nemo-blank-desktop-window.c
index 78dd963..bab4c98 100644
--- a/src/nemo-blank-desktop-window.c
+++ b/src/nemo-blank-desktop-window.c
@@ -205,7 +205,7 @@ nemo_blank_desktop_window_constructed (GObject *obj)
 
     GdkRectangle rect;
 
-    nemo_desktop_utils_get_monitor_work_rect (window->details->monitor, &rect);
+    nemo_desktop_utils_get_monitor_geometry (window->details->monitor, &rect);
 
     DEBUG ("NemoBlankDesktopWindow monitor:%d: x:%d, y:%d, w:%d, h:%d",
            window->details->monitor,
@@ -213,7 +213,7 @@ nemo_blank_desktop_window_constructed (GObject *obj)
            rect.width, rect.height);
 
     gtk_window_move (GTK_WINDOW (window), rect.x, rect.y);
-    gtk_window_maximize (GTK_WINDOW (window));
+    gtk_widget_set_size_request (GTK_WIDGET (window), rect.width, rect.height);
 
     gtk_window_set_resizable (GTK_WINDOW (window),
                   FALSE);
diff --git a/src/nemo-desktop-icon-view.c b/src/nemo-desktop-icon-view.c
index 90004f3..06fc751 100644
--- a/src/nemo-desktop-icon-view.c
+++ b/src/nemo-desktop-icon-view.c
@@ -53,6 +53,7 @@
 #include <libnemo-private/nemo-monitor.h>
 #include <libnemo-private/nemo-program-choosing.h>
 #include <libnemo-private/nemo-trash-monitor.h>
+#include <libnemo-private/nemo-desktop-utils.h>
 #include <limits.h>
 #include <stddef.h>
 #include <stdio.h>
@@ -97,6 +98,62 @@ desktop_directory_changed_callback (gpointer callback_data)
 	desktop_directory = nemo_get_desktop_directory ();
 }
 
+static void
+update_margins (NemoDesktopIconView *icon_view)
+{
+    NemoIconContainer *icon_container;
+    gint current_monitor;
+
+    icon_container = get_icon_container (icon_view);
+    current_monitor = nemo_desktop_utils_get_monitor_for_widget (GTK_WIDGET (icon_view));
+
+    /* _NET_WORKAREA only applies to the primary monitor - use it to adjust
+       container margins on the primary icon container only.  For any others,
+       add a sane amount of padding for any likely chrome. */
+
+    if (current_monitor != nemo_desktop_utils_get_primary_monitor ()) {
+        nemo_icon_container_set_margins (icon_container, 50, 50, 50, 50);
+        return;
+    }
+
+    GdkRectangle geometry, work_rect;
+
+    nemo_desktop_utils_get_monitor_geometry (current_monitor, &geometry);
+    nemo_desktop_utils_get_monitor_work_rect (current_monitor, &work_rect);
+
+    gint l, r, t, b;
+
+    l = work_rect.x - geometry.x;
+    r = (geometry.x + geometry.width) - (work_rect.x + work_rect.width);
+    t = work_rect.y - geometry.y;
+    b = (geometry.y + geometry.height) - (work_rect.y + work_rect.height);
+
+    nemo_icon_container_set_margins (icon_container, l, r, t, b);
+}
+
+static GdkFilterReturn
+gdk_filter_func (GdkXEvent *gdk_xevent,
+                 GdkEvent  *event,
+                 gpointer   data)
+{
+    XEvent *xevent = gdk_xevent;
+    NemoDesktopIconView *icon_view;
+
+    icon_view = NEMO_DESKTOP_ICON_VIEW (data);
+
+    switch (xevent->type) {
+        case PropertyNotify:
+            if (xevent->xproperty.atom == gdk_x11_get_xatom_by_name ("_NET_WORKAREA")) {
+                update_margins (icon_view);
+            }
+            break;
+        default:
+            break;
+    }
+
+    return GDK_FILTER_CONTINUE;
+}
+
 static const char *
 real_get_id (NemoView *view)
 {
@@ -104,6 +161,41 @@ real_get_id (NemoView *view)
 }
 
 static void
+unrealized_callback (GtkWidget *widget, NemoDesktopIconView *desktop_icon_view)
+{
+  g_return_if_fail (desktop_icon_view->details->root_window != NULL);
+
+  gdk_window_remove_filter (desktop_icon_view->details->root_window,
+                            gdk_filter_func,
+                            desktop_icon_view);
+
+  desktop_icon_view->details->root_window = NULL;
+}
+
+static void
+realized_callback (GtkWidget *widget, NemoDesktopIconView *desktop_icon_view)
+{
+  GdkWindow *root_window;
+  GdkScreen *screen;
+
+  g_return_if_fail (desktop_icon_view->details->root_window == NULL);
+
+  screen = gtk_widget_get_screen (widget);
+
+  root_window = gdk_screen_get_root_window (screen);
+
+  desktop_icon_view->details->root_window = root_window;
+
+  update_margins (desktop_icon_view);
+
+  /* Setup the property filter */
+  gdk_window_set_events (root_window, GDK_PROPERTY_CHANGE_MASK);
+  gdk_window_add_filter (root_window,
+                         gdk_filter_func,
+                         desktop_icon_view);
+}
+
+static void
 nemo_desktop_icon_view_dispose (GObject *object)
 {
 	NemoDesktopIconView *icon_view;
@@ -431,6 +523,11 @@ nemo_desktop_icon_view_init (NemoDesktopIconView *desktop_icon_view)
 				  G_CALLBACK (default_zoom_level_changed),
 				  desktop_icon_view);
 
+    g_signal_connect_object (desktop_icon_view, "realize",
+                             G_CALLBACK (realized_callback), desktop_icon_view, 0);
+    g_signal_connect_object (desktop_icon_view, "unrealize",
+                             G_CALLBACK (unrealized_callback), desktop_icon_view, 0);
+
 	g_signal_connect_swapped (nemo_desktop_preferences,
 				  "changed::" NEMO_PREFERENCES_DESKTOP_FONT,
 				  G_CALLBACK (font_changed_callback),
diff --git a/src/nemo-desktop-manager.c b/src/nemo-desktop-manager.c
index 5ba3536..e61bdac 100644
--- a/src/nemo-desktop-manager.c
+++ b/src/nemo-desktop-manager.c
@@ -135,50 +135,6 @@ layout_changed (NemoDesktopManager *manager)
     g_strfreev (pref_split);
 }
 
-static GdkFilterReturn
-gdk_filter_func (GdkXEvent *gdk_xevent,
-                  GdkEvent *event,
-                   gpointer data)
-{
-    XEvent *xevent = gdk_xevent;
-    NemoDesktopManager *manager;
-
-    manager = NEMO_DESKTOP_MANAGER (data);
-
-    switch (xevent->type) {
-        case PropertyNotify:
-            if (xevent->xproperty.atom == gdk_x11_get_xatom_by_name ("_NET_WORKAREA"))
-                layout_changed (manager);
-            break;
-        default:
-            break;
-    }
-
-    return GDK_FILTER_CONTINUE;
-}
-
-static void
-remove_workarea_filter (NemoDesktopManager *manager)
-{
-    gdk_window_remove_filter (manager->root_window,
-                              gdk_filter_func,
-                              manager);
-    manager->root_window = NULL;
-}
-
-static void
-add_workarea_filter (NemoDesktopManager *manager)
-{
-    GdkWindow *root_window = gdk_screen_get_root_window (manager->screen);
-
-    manager->root_window = root_window;
-
-    gdk_window_set_events (root_window, GDK_PROPERTY_CHANGE_MASK);
-    gdk_window_add_filter (root_window,
-                           gdk_filter_func,
-                           manager);
-}
-
 static void
 nemo_desktop_manager_get_property (GObject *object, guint property_id,
                               GValue *value, GParamSpec *pspec)
@@ -238,8 +194,6 @@ nemo_desktop_manager_constructed (GObject *object)
                                                                    G_CALLBACK (layout_changed),
                                                                    manager);
 
-    add_workarea_filter (manager);
-
     layout_changed (manager);
 }
 
@@ -256,8 +210,6 @@ nemo_desktop_manager_dispose (GObject *object)
     g_signal_handler_disconnect (nemo_preferences, manager->home_dir_changed_id);
     g_signal_handler_disconnect (nemo_preferences, manager->orphaned_icon_handling_id);
 
-    remove_workarea_filter (manager);
-
     G_OBJECT_CLASS (nemo_desktop_manager_parent_class)->dispose (object);
 }
 
diff --git a/src/nemo-desktop-window.c b/src/nemo-desktop-window.c
index 9b28ef1..f62e00d 100644
--- a/src/nemo-desktop-window.c
+++ b/src/nemo-desktop-window.c
@@ -105,7 +105,7 @@ nemo_desktop_window_constructed (GObject *obj)
 
     GdkRectangle rect;
 
-    nemo_desktop_utils_get_monitor_work_rect (window->details->monitor, &rect);
+    nemo_desktop_utils_get_monitor_geometry (window->details->monitor, &rect);
 
     DEBUG ("NemoDesktopWindow monitor:%d: x:%d, y:%d, w:%d, h:%d",
            window->details->monitor,
@@ -113,7 +113,7 @@ nemo_desktop_window_constructed (GObject *obj)
            rect.width, rect.height);
 
     gtk_window_move (GTK_WINDOW (window), rect.x, rect.y);
-    gtk_window_maximize (GTK_WINDOW (window));
+    gtk_widget_set_size_request (GTK_WIDGET (window), rect.width, rect.height);
 
     gtk_window_set_resizable (GTK_WINDOW (window),
                   FALSE);
diff --git a/src/nemo-window.h b/src/nemo-window.h
index 21b7f7e..6248bd1 100644
--- a/src/nemo-window.h
+++ b/src/nemo-window.h
@@ -141,7 +141,6 @@ void                 nemo_window_report_load_underway  (NemoWindow *window,
                                                             NemoView *view);
 void                 nemo_window_view_visible          (NemoWindow *window,
                                                             NemoView *view);
-NemoWindowSlot * nemo_window_get_active_slot       (NemoWindow *window);
 GList *              nemo_window_get_panes             (NemoWindow *window);
 NemoWindowSlot * nemo_window_get_active_slot       (NemoWindow *window);
 void                 nemo_window_push_status           (NemoWindow *window,
